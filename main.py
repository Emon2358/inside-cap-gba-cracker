import sys
import struct

def get16(data, offset):
    return struct.unpack_from('<H', data, offset)[0]

# 任天堂ロゴデータ
nintendologo = bytes([
    0x24, 0xFF, 0xAE, 0x51, 0x69, 0x9A, 0xA2, 0x21, 0x3D, 0x84, 0x82, 0x0A, 0x84, 0xE4, 0x09, 0xAD,
    0x11, 0x24, 0x8B, 0x98, 0xC0, 0x81, 0x7F, 0x21, 0xA3, 0x52, 0xBE, 0x19, 0x93, 0x09, 0xCE, 0x20,
    0x10, 0x46, 0x4A, 0x4A, 0xF8, 0x27, 0x31, 0xEC, 0x58, 0xC7, 0xE8, 0x33, 0x82, 0xE3, 0xCE, 0xBF,
    0x85, 0xF4, 0xDF, 0x94, 0xCE, 0x4B, 0x09, 0xC1, 0x94, 0x56, 0x8A, 0xC0, 0x13, 0x72, 0xA7, 0xFC,
    0x9F, 0x84, 0x4D, 0x73, 0xA3, 0xCA, 0x9A, 0x61, 0x58, 0x97, 0xA3, 0x27, 0xFC, 0x03, 0x98, 0x76,
    0x23, 0x1D, 0xC7, 0x61, 0x03, 0x04, 0xAE, 0x56, 0xBF, 0x38, 0x84, 0x00, 0x40, 0xA7, 0x0E, 0xFD,
    0xFF, 0x52, 0xFE, 0x03, 0x6F, 0x95, 0x30, 0xF1, 0x97, 0xFB, 0xC0, 0x85, 0x60, 0xD6, 0x80, 0x25,
    0xA9, 0x63, 0xBE, 0x03, 0x01, 0x4E, 0x38, 0xE2, 0xF9, 0xA2, 0x34, 0xFF, 0xBB, 0x3E, 0x03, 0x44,
    0x78, 0x00, 0x90, 0xCB, 0x88, 0x11, 0x3A, 0x94, 0x65, 0xC0, 0x7C, 0x63, 0x87, 0xF0, 0x3C, 0xAF,
    0xD6, 0x25, 0xE4, 0x8B, 0x38, 0x0A, 0xAC, 0x72, 0x21, 0xD4, 0xF8, 0x07
])

initcode = bytes([0xd2, 0x00, 0xa0, 0xe3, 0x00, 0xf0, 0x21, 0xe1])
killcode = bytes([0x00, 0x20, 0x70, 0x47])

emucheck = bytes([
    0xF8, 0xB5, 0x37, 0x4A, 0x37, 0x48, 0x96, 0x88, 0x90, 0x80, 0x15, 0x89, 0x11, 0x88, 0x00, 0x20,
    0x00, 0x91, 0x10, 0x81, 0x10, 0x80, 0x34, 0x48, 0x00, 0x21, 0x81, 0x63, 0x33, 0x48, 0x41, 0x60,
    0x01, 0x61, 0xC1, 0x61, 0x32, 0x49, 0x00, 0x20, 0x48, 0x80, 0xC8, 0x80, 0x48, 0x81, 0xC8, 0x81,
    0x48, 0x60, 0x08, 0x60, 0x21, 0x20, 0x80, 0x04, 0x48, 0x60, 0xC8, 0x03, 0x08, 0x60, 0x03, 0x20
])

def higuromcheck(data, offset):
    if (get16(data, offset) & 0xff00) != 0xb500: return False
    if (get16(data, offset + 2) & 0xf800) != 0x4800: return False
    if (get16(data, offset + 4) & 0xf800) != 0x4800: return False
    if (get16(data, offset + 6) & 0xffc0) != 0x6800: return False
    if (get16(data, offset + 8) & 0xffc0) != 0x1fc0: return False
    if (get16(data, offset + 10) & 0xf8ff) != 0x38f9: return False
    if (get16(data, offset + 12) & 0xfe00) != 0x1a00: return False
    if (get16(data, offset + 14) & 0xffc0) != 0x1fc0: return False
    if (get16(data, offset + 16) & 0xf8ff) != 0x3839: return False
    if (get16(data, offset + 18) & 0xffc0) != 0x6bc0: return False
    return True

def extdromcheck(data, offset):
    if (get16(data, offset) & 0xff00) != 0xb500: return False
    if (get16(data, offset + 2) & 0xf800) != 0x4800: return False
    if (get16(data, offset + 4) & 0xf800) != 0x4800: return False
    if (get16(data, offset + 6) & 0xffc0) != 0x6800: return False
    if (get16(data, offset + 8) & 0xffc0) != 0x4280: return False
    if (get16(data, offset + 10) & 0xffff) != 0xd003: return False
    if (get16(data, offset + 12) & 0xffc0) != 0x16c0: return False
    if (get16(data, offset + 14) & 0xff00) != 0xbc00: return False
    if (get16(data, offset + 16) & 0xff00) != 0xbc00: return False
    if (get16(data, offset + 18) & 0xff87) != 0x4700: return False
    return True

def main(filename):
    with open(filename, "rb") as f:
        buf = bytearray(f.read())

    if len(buf) < 0x100 or (buf[0xc0:0xc0+len(initcode)] != initcode and buf[0xc4:0xc4+len(initcode)] != initcode):
        print("File is not a valid ROM")
        return

    emukilled = False
    romkilled = False

    for i in range(0, len(buf) - 0x40, 4):
        if buf[i:i+len(emucheck)] == emucheck:
            buf[i:i+len(killcode)] = killcode
            emukilled = True
            print("Emulation check bypassed.")

        if higuromcheck(buf, i) or extdromcheck(buf, i):
            buf[i:i+len(killcode)] = killcode
            romkilled = True
            print("ROM protection bypassed.")

    if emukilled or romkilled:
        with open(filename, "wb") as f:
            f.write(buf)
            print("Protection removed and file saved.")

if __name__ == "__main__":
    # ここに直接ファイルパスを入力
    filename = r"path/to/your/rom.gba"
    main(filename)
